import contextlib
import io
import itertools
import shutil
import unittest.mock


@unittest.mock.patch('os.removedirs', spec_set=True)
@unittest.mock.patch('os.listdir', spec_set=True)
@unittest.mock.patch('os.remove', spec_set=True)
class TestDeleteUp(unittest.TestCase):

    def testNoDir(self, removeP, listdirP, removedirsP):
        path = 'myfile'
        files.deleteUp(path)

        removeP.assert_called_once_with(path)
        listdirP.assert_not_called()
        removedirsP.assert_not_called()

    def testDirNotEmpty(self, removeP, listdirP, removedirsP):
        path = 'path/to/secret.file'
        listdirP.return_value = ['dummy.file']
        files.deleteUp(path)

        removeP.assert_called_once_with(path)
        listdirP.assert_called_once_with('path/to')
        removedirsP.assert_not_called()

    def testDirBecomesEmpty(self, removeP, listdirP, removedirsP):
        path = 'my/other/trunk/letters'
        listdirP.return_value = []
        files.deleteUp(path)

        removeP.assert_called_once_with(path)
        listdirP.assert_called_once_with('my/other/trunk')
        removedirsP.assert_called_once_with('my/other/trunk')


class TestCopyDown(unittest.TestCase):

    def setUp(self):
        makedirsP = unittest.mock.patch('os.makedirs', spec_set=True)
        self.makedirsMock = makedirsP.start()
        self.addCleanup(makedirsP.stop)

        copyfileP = unittest.mock.patch('shutil.copyfile',
                spec_set=True)
        self.copyfileMock = copyfileP.start()
        self.addCleanup(copyfileP.stop)

    def testNoDir(self):
        src, dest = 'the/source', 'the-dest-file'
        files.copyDown(src, dest)
        self.makedirsMock.assert_not_called()
        self.copyfileMock.assert_called_once_with(src, dest)

    def testWithDir(self):
        src, dest = 'my/source', 'my/dest/file'
        files.copyDown(src, dest)
        self.makedirsMock.assert_called_once_with('my/dest', exist_ok=True)
        self.copyfileMock.assert_called_once_with(src, dest)


class TestConfirmTreeChange(unittest.TestCase):

    @unittest.mock.patch('builtins.input', spec_set=True)
    def testWithoutChange(self, stdin):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            result = files.confirmTreeChange(
                    files.TreeChange(delete=set(), overwrite=set(), add=set()),
                    'X')
        self.assertEqual(stdout.getvalue(), '')
        stdin.assert_not_called()
        self.assertEqual(result, True)

    @unittest.mock.patch('builtins.input', spec_set=True)
    def testWithChange(self, stdin):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            files.confirmTreeChange(files.TreeChange(delete={'bad', 'old'},
                overwrite={'mutant', 'altered'}, add={'hello', 'hola'}), 'R')
        self.assertEqual(stdout.getvalue(), '''• New files:
+ hello
+ hola

• Deleted files:
− bad
− old

• Changed files:
≠ altered
≠ mutant

''')
        stdin.assert_called_once_with('Make changes to R? [y/N] ')

    @unittest.mock.patch('sys.stdout', spec_set=True)   # silence output
    def testInput(self, stdout):
        treeChange = files.TreeChange(delete=set(), overwrite=set(), add={'a'})
        for answer, expected in {
                '': False, 'n': False, 'x': False, 'smth': False, 'yes': False,
                'y': True, 'Y': True,
                }.items():
            with unittest.mock.patch('builtins.input', spec_set=True,
                    return_value=answer):
                confirmed = files.confirmTreeChange(treeChange, 'my-replica')
            self.assertEqual(confirmed, expected)


@unittest.mock.patch('files.copyDown', spec_set=True)
@unittest.mock.patch('files.deleteUp', spec_set=True)
class TestApplyTreeChange(unittest.TestCase):

    def testNoChanges(self, deleteUpP, copyDownP):
        files.applyTreeChange(files.TreeChange(delete=set(), overwrite=set(),
            add=set()), src='s', dest='d')
        deleteUpP.assert_not_called()
        copyDownP.assert_not_called()

    def testChanges(self, deleteUpP, copyDownP):
        files.applyTreeChange(files.TreeChange(delete={'bin/trash', 'rubbish'},
                overwrite={'news', 'report/month'},
                add={'bowl/fruit', 'bowl/sugar', 'kitchen/cup/water'}),
                src='my/src', dest='some/dest/path')
        call = unittest.mock.call

        calls = list(map(call,
            ['some/dest/path/bin/trash', 'some/dest/path/rubbish']))
        deleteUpP.assert_has_calls(calls, any_order=True)
        self.assertEqual(deleteUpP.call_count, len(calls))

        calls = list(itertools.starmap(call, [
            ('my/src/news', 'some/dest/path/news'),
            ('my/src/report/month', 'some/dest/path/report/month'),
            ('my/src/bowl/fruit', 'some/dest/path/bowl/fruit'),
            ('my/src/bowl/sugar', 'some/dest/path/bowl/sugar'),
            ('my/src/kitchen/cup/water', 'some/dest/path/kitchen/cup/water'),
            ]))
        copyDownP.assert_has_calls(calls, any_order=True)
        self.assertEqual(copyDownP.call_count, len(calls))

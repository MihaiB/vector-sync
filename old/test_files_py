import contextlib
import io
import itertools


class TestConfirmTreeChange(unittest.TestCase):

    @unittest.mock.patch('builtins.input', spec_set=True)
    def testWithoutChange(self, stdin):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            result = files.confirmTreeChange(
                    files.TreeChange(delete=set(), overwrite=set(), add=set()),
                    'X')
        self.assertEqual(stdout.getvalue(), '')
        stdin.assert_not_called()
        self.assertEqual(result, True)

    @unittest.mock.patch('builtins.input', spec_set=True)
    def testWithChange(self, stdin):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            files.confirmTreeChange(files.TreeChange(delete={'bad', 'old'},
                overwrite={'mutant', 'altered'}, add={'hello', 'hola'}), 'R')
        self.assertEqual(stdout.getvalue(), '''• New files:
+ hello
+ hola

• Deleted files:
− bad
− old

• Changed files:
≠ altered
≠ mutant

''')
        stdin.assert_called_once_with('Make changes to R? [y/N] ')

    @unittest.mock.patch('sys.stdout', spec_set=True)   # silence output
    def testInput(self, stdout):
        treeChange = files.TreeChange(delete=set(), overwrite=set(), add={'a'})
        for answer, expected in {
                '': False, 'n': False, 'x': False, 'smth': False, 'yes': False,
                'y': True, 'Y': True,
                }.items():
            with unittest.mock.patch('builtins.input', spec_set=True,
                    return_value=answer):
                confirmed = files.confirmTreeChange(treeChange, 'my-replica')
            self.assertEqual(confirmed, expected)


@unittest.mock.patch('files.copy_down', spec_set=True)
@unittest.mock.patch('files.delete_up', spec_set=True)
class TestApplyTreeChange(unittest.TestCase):

    def testNoChanges(self, deleteUpP, copyDownP):
        files.applyTreeChange(files.TreeChange(delete=set(), overwrite=set(),
            add=set()), src='s', dest='d')
        deleteUpP.assert_not_called()
        copyDownP.assert_not_called()

    def testChanges(self, deleteUpP, copyDownP):
        files.applyTreeChange(files.TreeChange(delete={'bin/trash', 'rubbish'},
                overwrite={'news', 'report/month'},
                add={'bowl/fruit', 'bowl/sugar', 'kitchen/cup/water'}),
                src='my/src', dest='some/dest/path')
        call = unittest.mock.call

        calls = list(map(call,
            ['some/dest/path/bin/trash', 'some/dest/path/rubbish']))
        deleteUpP.assert_has_calls(calls, any_order=True)
        self.assertEqual(deleteUpP.call_count, len(calls))

        calls = list(itertools.starmap(call, [
            ('my/src/news', 'some/dest/path/news'),
            ('my/src/report/month', 'some/dest/path/report/month'),
            ('my/src/bowl/fruit', 'some/dest/path/bowl/fruit'),
            ('my/src/bowl/sugar', 'some/dest/path/bowl/sugar'),
            ('my/src/kitchen/cup/water', 'some/dest/path/kitchen/cup/water'),
            ]))
        copyDownP.assert_has_calls(calls, any_order=True)
        self.assertEqual(copyDownP.call_count, len(calls))



def confirm_overwrite_tree(*, read_from_ts, write_to_ts):
    """Ask the user to confirm if there are changes then return True/False."""
    for ts in read_from_ts, write_to_ts:
        check_tree_status(ts)
    del ts

    r, w = (ts['disk_hashes'] for ts in (read_from_ts, write_to_ts))

    add_paths = {p for p in r if p not in w}
    del_paths = {p for p in w if p not in r}
    overwrite_paths = {p for p in w if p in r and r[p] != w[p]}

    empty = True
    for paths, word, char in (
            (add_paths, 'Add', '+'),
            (del_paths, 'Delete', '-'),
            (overwrite_paths, 'Overwrite', '≠'),
            ):
        if not paths:
            continue
        empty = False
        print(f'• {word}:')
        for p in sorted(paths):
            print(char, json.dumps(p))
        print()

    if empty:
        return True
    return input(f'Change {write_to_ts["id"]}? [y/N] ') == 'y'


def overwrite_tree(*, read_from_ts, write_to_ts):
    for ts in read_from_ts, write_to_ts:
        check_tree_status(ts)
    del ts

    r, w = (ts['disk_hashes'] for ts in (read_from_ts, write_to_ts))

    for p in w:
        if p not in r:
            delete_up(os.path.join(write_to_ts['path'], p))

    for p in r:
        if p not in w or w[p] != r[p]:
            copy_down(os.path.join(read_from_ts['path'], p),
                    os.path.join(write_to_ts['path'], p))


def sync_file_trees(path_a, path_b):
    a, b = (read_tree_status(p) for p in (path_a, path_b))
    del path_a, path_b

    if a['id'] == b['id']:
        raise Exception(f'file trees have the same ID: {json.dumps(a["id"])}')

    if (a['pre_vv'] == a['post_vv'] == b['pre_vv'] == b['post_vv']
            and a['known_hashes'] == a['disk_hashes']
            == b['known_hashes'] == b['disk_hashes']):
        print(json.dumps(a["id"]), 'and', json.dumps(b["id"]),
            'are already synchronized.')
        return

    if a['disk_hashes'] == b['disk_hashes']:
        vv_join = versionvectors.join(a['post_vv'], b['post_vv'])
        for ts in a, b:
            write_meta_data_if_different(vv_join, a['disk_hashes'], ts)
        del ts, vv_join

        print(f'Synchronized {json.dumps(a["id"])} and {json.dumps(b["id"])}.')
        return

    if versionvectors.less(a['post_vv'], b['post_vv']):
        args = {'read_from_ts': b, 'write_to_ts': a}
        if not confirm_overwrite_tree(**args):
            raise Exception('canceled by the user')
        overwrite_tree(**args)
        del args

        for ts in a, b:
            write_meta_data_if_different(b['post_vv'], b['disk_hashes'], ts)
        del ts

        print(f'Synchronized {json.dumps(a["id"])} and {json.dumps(b["id"])}.')
        return

    if versionvectors.less(b['post_vv'], a['post_vv']):
        return sync_file_trees(b['path'], a['path'])

    raise Exception(f'{json.dumps(a["id"])} and {json.dumps(b["id"])}'
            + ' have diverged, reconcile their files first')

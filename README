The project is being rewritten.
The latest stable version is commit 05e43992d9d118efb77f39f95c7d980f5baaba0b.


Synchronize directory replicas using version vectors.


§ Version Vectors

A Version Vector is a map from replica IDs (strings) to counters (integers).
(In principle: when a replica's data changes, its counter is incremented.)

X < Y ⇔ X ≠ Y and Y has equal or higher counters for all replica IDs in X.

{}		< {A:1}
{A:1}		≮ {A:1}
{A:1}		< {A:2, B:3}
{A:1, B:2}	≮ {B:3}
{A:1, B:2}	≮ {A:3, B:1}
{A:1, B:2}	< {A:1, B:3}

(In principle: X is before Y.)

X ⊔ Y (join) has all replica IDs in X and Y, each with its maximum counter.

{A:1} ⊔ {A:2}	= {A:2}
{A:1} ⊔ {B:2}	= {A:1, B:2}
{A:1, B:4, C:2, D:6} ⊔ {B:3, C:2, D:7, E:9} = {A:1, B:4, C:2, D:7, E:9}

(In principle: synchronizing X and Y results in X ⊔ Y.)


§ Replicas

A replica is a directory containing the file '.vector-sync'. This file stores:
- ID: the unique name of the replica.
- version vector: {replica_id1: counter1, replica_id2: counter2, …}.
- files: {path1: hash1, path2: hash2, …} excluding '.vector-sync' descendants.

Initializing a new replica with ID A creates a '.vector-sync' file containing:
- ID: A
- version vector: {}
- files: {}


§ Synchronizing replicas A and B

For each replica R in {A, B}:
- Vr ← version vector, Kr ← known '.vector-sync' files, Dr ← directory content.
- If Dr ≠ Kr, increment R's counter in Vr (set it to 1 if R is not in Vr).
Nothing has been written to disk, only calculated in memory.

If Da = Db, D ← Da
else if Va < Vb, D ← Db
else if Vb < Va, D ← Da
else stop: the user must reconcile the dirs then run the sync again

Set the directory content and '.vector-sync' in A and B to: Va ⊔ Vb, D.
